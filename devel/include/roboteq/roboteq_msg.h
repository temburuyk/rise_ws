// Generated by gencpp from file roboteq/roboteq_msg.msg
// DO NOT EDIT!


#ifndef ROBOTEQ_MESSAGE_ROBOTEQ_MSG_H
#define ROBOTEQ_MESSAGE_ROBOTEQ_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace roboteq
{
template <class ContainerAllocator>
struct roboteq_msg_
{
  typedef roboteq_msg_<ContainerAllocator> Type;

  roboteq_msg_()
    : header()
    , rpm_1(0)
    , rpm_2(0)
    , encoder_1(0)
    , encoder_2(0)
    , mxrpm(0)  {
    }
  roboteq_msg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , rpm_1(0)
    , rpm_2(0)
    , encoder_1(0)
    , encoder_2(0)
    , mxrpm(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _rpm_1_type;
  _rpm_1_type rpm_1;

   typedef int32_t _rpm_2_type;
  _rpm_2_type rpm_2;

   typedef int32_t _encoder_1_type;
  _encoder_1_type encoder_1;

   typedef int32_t _encoder_2_type;
  _encoder_2_type encoder_2;

   typedef int16_t _mxrpm_type;
  _mxrpm_type mxrpm;




  typedef boost::shared_ptr< ::roboteq::roboteq_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboteq::roboteq_msg_<ContainerAllocator> const> ConstPtr;

}; // struct roboteq_msg_

typedef ::roboteq::roboteq_msg_<std::allocator<void> > roboteq_msg;

typedef boost::shared_ptr< ::roboteq::roboteq_msg > roboteq_msgPtr;
typedef boost::shared_ptr< ::roboteq::roboteq_msg const> roboteq_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboteq::roboteq_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboteq::roboteq_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roboteq

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/home/yashwant/y_ws/src/common_msgs-jade-devel/sensor_msgs/msg'], 'roboteq': ['/home/yashwant/rise_ws/src/roboteq/msg'], 'geometry_msgs': ['/home/yashwant/y_ws/src/common_msgs-jade-devel/geometry_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roboteq::roboteq_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboteq::roboteq_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboteq::roboteq_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboteq::roboteq_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboteq::roboteq_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboteq::roboteq_msg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboteq::roboteq_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a71ff46624c4d40ab790d3ae256f719d";
  }

  static const char* value(const ::roboteq::roboteq_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa71ff46624c4d40aULL;
  static const uint64_t static_value2 = 0xb790d3ae256f719dULL;
};

template<class ContainerAllocator>
struct DataType< ::roboteq::roboteq_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboteq/roboteq_msg";
  }

  static const char* value(const ::roboteq::roboteq_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboteq::roboteq_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# For Timestamp and Seq\n\
\n\
Header header\n\
\n\
\n\
# The readings of rpm of both wheels, and their rates of change\n\
\n\
int32 rpm_1\n\
int32 rpm_2\n\
\n\
\n\
# The encoder values coming from both wheels\n\
\n\
int32 encoder_1\n\
int32 encoder_2\n\
\n\
\n\
# MaxRPM\n\
\n\
int16 mxrpm\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::roboteq::roboteq_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboteq::roboteq_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.rpm_1);
      stream.next(m.rpm_2);
      stream.next(m.encoder_1);
      stream.next(m.encoder_2);
      stream.next(m.mxrpm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct roboteq_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboteq::roboteq_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboteq::roboteq_msg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "rpm_1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rpm_1);
    s << indent << "rpm_2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rpm_2);
    s << indent << "encoder_1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.encoder_1);
    s << indent << "encoder_2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.encoder_2);
    s << indent << "mxrpm: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mxrpm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTEQ_MESSAGE_ROBOTEQ_MSG_H
